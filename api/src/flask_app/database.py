import sys
from flask_sqlalchemy import SQLAlchemy
from flask_sqlalchemy_session import flask_scoped_session
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import .models

class Database():
    '''
    app:     The given app instance to bind to
    db:      The instantiated database instance
    engine:  The engine that the database is bound to
    session: The database session to use to create queries
    Base:    The context used to form appropriate sqlalchemy
             table objects out of classes that extend the Base
    Models:  The models bound to the engine to use in the database
    '''
    app     = None
    db      = None
    engine  = None
    session = None
    Base    = None
    Models  = None
    
    def __init__(self, app, create_tables=False):
        '''
        Setup bindings to instantiate a new database instance for a specified app
        '''
        
        self.app = app
        self.db  = SQLAlchemy(app)
        
        # Use the existing db engine generated by flask
        #self.engine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'], echo=True)
        self.engine = self.db.get_engine(app=app)
        
        # Create a db session using the flask builtin session handler
        self.session = flask_scoped_session(
            sessionmaker(
                autocommit=True,
                autoflush=True,
                bind=self.engine))
        self.Base = declarative_base()
        self.Base.query = self.session.query_property()
        
        # Store the instansiated modules for the database
        # as a reference to them for use in routes.
        # See: routes.py
        #
        # Models must be imported here and before calling init_db()
        # so that they are registered properly on the metadata.
        self.Models = Models(self.Base).init_models()
        
        if create_tables:
            print('Creating tables...')
            self.create_tables()
    
    def create_tables(self):
        '''
        Create tables from models bound to the Base for the specified flask db engine
        '''
        try:
            self.Base.metadata.create_all(bind=self.engine)
        except Exception as e:
            sys.exit(e)
